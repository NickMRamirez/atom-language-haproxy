fileTypes: [
  "haproxy"
  "cfg"
]
foldingStartMarker: "^(global|defaults|listen|frontend|backend|ruleset|userlist)"
foldingStopMarker: "^(global|defaults|listen|frontend|backend|ruleset|userlist)"
name: "HAProxy"
patterns: [
  {
    captures:
      "2":
        name: "string.unquoted.sectionname.haproxy-config"
      "3":
        name: "variable.parameter.ip-port.haproxy-config"
      "5":
        name: "punctuation.separator.ip.haproxy-config"
      "6":
        name: "variable.parameter.ip-port.haproxy-config"
    match: "^(global|defaults|listen|frontend|backend|ruleset|userlist)\\s*(\\S+)?\\s*((\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})?:\\d{1,5})?(,)?((\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})?:\\d{1,5})?"
    name: "meta.tag.haproxy-config"
  }
  {
    match: "#.+$"
    name: "comment.line.number-sign.haproxy-config"
  }
  {
     # this also inludes ip address-like dot separated instant with optional port
     # also optional letter supported, like '100s'
    match: "\\b[0-9]+([\\.:][0-9]+)*[a-z]?\\b"
    name: "constant.numeric.haproxy-config"
  }
  {
    match: "(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})?:\\d{1,5}"
    name: "variable.parameter.ip-port.haproxy-config"
  }
  {
    match: "{keywords}"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  {
    match: "{global_keywords}"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  {
    match: "{double_first}"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  {
    match: "{double_second}"
    name: "variable.language.reserved.haproxy-config"
  }
  {
    match: "{bind_options}"
    name: "variable.language.reserved.haproxy-config"
  }
  {
    match: "{server_options}"
    name: "variable.language.reserved.haproxy-config"
  }
  {
    match: "\\s+(roundrobin|static-rr|leastconn|first|url_param|health|global|httplog|except|kern|user|mail|daemon|auth|syslog|lpr|news|uucp|cron|auth2|ftp|ntp|audit|alert|cron2|local0|local1|local2|local3|local4|local5|local6|local7|emerg|crit|err|warning|notice|info|debug|rewrite|insert|nocache|postonly|indirect|prefix|location|scheme|code|request|response|header|check|cookie|weight|usesrc|http|tcp)(?=\\s+)"
    name: "variable.language.reserved.extra.haproxy-config"
  }
  {
    match: "\\\\"
    name: "constant.character.escape.haproxy-config"
  }
  {
    match: "\\s+((base|cook|hdr|path|shdr|url|urlp)(_beg|_dir|_dom|_end|_len|_reg|_sub)?)\\b"
    name: "entity.name.function.hdr.haproxy-config"
  }
  {
    match: "\\b(if|rewrite)\\b"
    name: "keyword.control.directive.module.http.rewrite"
  }
  {
    match: "%\\[[^\\]]+\\]"
    name: "variable.language.other.haproxy-config"
  }
  {
    match: "\\s+(or|\\|\\||!)\\s+"
    name: "keyword.operator.logical.haproxy-config"
  }
]
scopeName: "source.haproxy-config"
